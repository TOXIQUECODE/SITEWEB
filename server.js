const express = require('express');
const http = require('http');
const WebSocket = require('ws');

const app = express();
const server = http.createServer(app);

// WebSocket sur le mÃªme serveur HTTP (port 80)
const wss = new WebSocket.Server({ noServer: true });

// GÃ¨re les connexions WebSocket
wss.on('connection', (ws) => {
  console.log('ğŸŸ¢ Nouveau client WebSocket connectÃ©');

  ws.on('message', (message) => {
    console.log('ğŸ“¨ Message reÃ§u :', message.toString());
    ws.send('âœ… RÃ©ponse du serveur : ' + message);
  });

  ws.on('close', () => {
    console.log('ğŸ”´ Client dÃ©connectÃ©');
  });
});

// Redirige les connexions WebSocket Ã  ws://<ip>/ (par exemple depuis lâ€™Arduino)
server.on('upgrade', (request, socket, head) => {
  wss.handleUpgrade(request, socket, head, (ws) => {
    wss.emit('connection', ws, request);
  });
});

// Sert les fichiers statiques depuis le dossier public (HTML, JS, CSSâ€¦)
app.use(express.static('public'));

// DÃ©marre le serveur HTTP sur le port 80
server.listen(80, () => {
  console.log('ğŸš€ Serveur HTTP & WebSocket en Ã©coute sur le port 80');
});
